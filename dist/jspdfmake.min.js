"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function JsPDFMake(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.docDefinition=e,this.options={orientation:"p",unit:"pt",format:"a4",hotfixes:[],lineHeight:DEFAULT_LINE_HEIGHT},this.doc=new JsPDF(this.options).setProperties({title:t}),this.title=t,this.pageWidth=this.doc.internal.pageSize.getWidth(),this.pageHeight=this.doc.internal.pageSize.getHeight(),this.pageXMargin=i.pageXMargin||0,this.pageYMargin=i.pageYMargin||0,this.maxLineWidth=this.pageWidth-2*this.pageXMargin,this.tocSections={},this.generateFromDocDefinition()}Object.defineProperty(exports,"__esModule",{value:!0});var JsPDF=_interopDefault(require("jspdf")),DEFAULT_FONT_SIZE=18,DEFAULT_LINE_HEIGHT=1,DEFAULT_ALIGN="left",DEFAULT_FONT_NAME="times",DEFAULT_FONT_STYLE="normal",DEFAULT_TEXT_COLOR="black";JsPDFMake.prototype.initTOC=function(){var t=this;this.tocSections={},this.docDefinition.content.filter(function(t){return t.toc}).forEach(function(e){var i=e.toc;if(t.tocSections[i.id])throw new Error("Duplicate table of contents id '"+i.id+"', please make sure all table of contents have a uniq id");var n=Object.assign({},i);delete n.id,t.tocSections[i.id]={items:[],options:n}})},JsPDFMake.prototype.transformTOCToContent=function(t){var e=t.options,i=t.items,n=[e.title];return i.forEach(function(t){var i=t.title,r=t.paragraphIndex,a=Object.assign({text:i,isLink:!0,linkParagraphIndex:r},e.itemOptions);n.push(a)}),n},JsPDFMake.prototype.updateTOCLinks=function(t){var e=0,i=0;return t.forEach(function(t){var n=0;t.isToc?(t.lines.forEach(function(t){n=t.pageNumber,t.pageNumber+=i}),e+=n):t.lines.forEach(function(t){t.pageNumber+=e,i=t.pageNumber})}),t.forEach(function(e){e.lines.forEach(function(e){e.linkParagraphIndex>=0&&(e.linkPage=t[e.linkParagraphIndex].lines[0].pageNumber)})}),t};var slicedToArray=function(){function t(t,e){var i=[],n=!0,r=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(i.push(o.value),!e||i.length!==e);n=!0);}catch(t){r=!0,a=t}finally{try{!n&&s.return&&s.return()}finally{if(r)throw a}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();JsPDFMake.prototype.size=function(){return this.doc.internal.pages.length-1},JsPDFMake.prototype.addPage=function(){var t=this.doc,e=this.getCurrentPageNumber();e===this.size()?t.addPage():t.insertPage(e)},JsPDFMake.prototype.clearDoc=function(){for(var t=this.doc;t.internal.pages.length>1;)t.deletePage(1);this.addPage()},JsPDFMake.prototype.updateDocDefinition=function(t){this.docDefinition=t,this.generateFromDocDefinition()},JsPDFMake.prototype.getCurrentPageNumber=function(){return this.doc.internal.getCurrentPageInfo().pageNumber},JsPDFMake.prototype.isCursorOutOfPageVertically=function(t){return t>this.pageHeight-this.pageYMargin},JsPDFMake.prototype.drawTextInLine=function(t){var e=t.text,i=t.fontSize,n=t.fontName,r=t.fontStyle,a=t.textColor,o=t.xOffset,s=t.yOffset,f=t.pageNumber,c=t.maxFontSize,h=t.isLink,p=t.linkPage,g=this.doc,u=i/2+i/4;return g.setPage(f).setFont(n,r).setFontSize(i).setTextColor(a),h?g.textWithLink(e,o,u+Math.max(i,c)-i+s,{pageNumber:p}):g.text(o,u+Math.max(i,c)-i+s,e),!0},JsPDFMake.prototype.drawParagraphs=function(t){var e=this;t.forEach(function(t){var i=t.lines;return(void 0===i?[]:i).forEach(function(t){for(;t.pageNumber>e.size();)e.addPage();e.drawTextInLine(t)})})},JsPDFMake.prototype.escapeSpecialCharacters=function(t){return t.replace(/[^A-Za-z 0-9 \n\t\.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g,"")},JsPDFMake.prototype.renderParagraph=function(t,e,i,n,r){var a=t.text,o=t.pageBreak,s=void 0===o?"none":o,f=t.fontSize,c=void 0===f?DEFAULT_FONT_SIZE:f,h=t.fontName,p=void 0===h?DEFAULT_FONT_NAME:h,g=t.fontStyle,u=void 0===g?DEFAULT_FONT_STYLE:g,l=t.textColor,d=void 0===l?DEFAULT_TEXT_COLOR:l,P=t.align,T=void 0===P?DEFAULT_ALIGN:P,D=t.marginTop,m=void 0===D?0:D,F=t.marginRight,v=void 0===F?0:F,x=t.marginBottom,E=void 0===x?0:x,k=t.marginLeft,y=void 0===k?0:k,O=t.tocIds,M=void 0===O?[]:O,L=t.tocItemText,b=t.isLink,N=void 0!==b&&b,S=t.linkPage,_=t.linkParagraphIndex,C=this,A=this.doc,I=this.maxLineWidth,J=this.tocSections,w=this.pageXMargin,z=this.pageYMargin,U=this.pageWidth;if("string"!=typeof a)return console.warn("Text is only supported as string format, this section will not be rendered => "+a),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:W};("before"===s||this.isCursorOutOfPageVertically(i+c))&&(i=z,n+=1),M.forEach(function(t){if(!J[t])throw new Error("Unknown table of contents id '"+t+"'");J[t].items.push({title:L||a,paragraphIndex:r})});var Y=A.setFont(p,u).setFontSize(c).setTextColor(d).splitTextToSize(this.escapeSpecialCharacters(a),I-y-v);i+=m;var W=[];return Y.forEach(function(t){C.isCursorOutOfPageVertically(i+c)&&(i=z,n+=1),e=w+y,"center"===T?e=U/2-A.getTextWidth(t)/2+y-v:"right"===T&&(e=U-A.getTextWidth(t)-w-v),W.push({text:t,fontSize:c,fontName:p,fontStyle:u,textColor:d,xOffset:e,yOffset:i,pageNumber:n,maxFontSize:c,isLink:N,linkPage:S,linkParagraphIndex:_}),i+=c}),i+=E,"after"===s&&(i=z,n+=1),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:W}},JsPDFMake.prototype.transformContentToDrawableParagraphs=function(t){var e=this,i=this.pageYMargin,n=void 0,r=1;return t.map(function(a,o){if(a.toc)return r>1&&o<t.length-1&&(r+=1,i=e.pageYMargin),{isToc:!0,id:a.toc.id};var s=e.renderParagraph(a,n,i,r,o),f=s.nextXOffset,c=s.nextYOffset,h=s.nextPage,p=s.lines;return i=c,n=f,r=h,{lines:p}}).filter(function(t){return t})},JsPDFMake.prototype.generateFromDocDefinition=function(){var t=this,e=this.docDefinition;this.clearDoc(),this.initTOC();var i=this.transformContentToDrawableParagraphs(e.content),n=this.tocSections;Object.entries(n).forEach(function(e){var n=slicedToArray(e,2),r=n[0],a=n[1],o=t.transformTOCToContent(a),s=t.transformContentToDrawableParagraphs(o);i.forEach(function(t){t.isToc&&t.id===r&&(t.lines=s.map(function(t){return t.lines}).flat())})}),this.drawParagraphs(this.updateTOCLinks(i))},JsPDFMake.prototype.download=function(){this.doc.save(this.title)},exports.JsPDFMake=JsPDFMake;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
