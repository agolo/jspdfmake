"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function JsPDFMake(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.docDefinition=e;var n={orientation:"p",unit:"pt",format:"a4",hotfixes:[],lineHeight:DEFAULT_LINE_HEIGHT};this.options=_extends({},i),this.doc=new JsPDF(n).setProperties({title:t}),this.title=t,this.pageWidth=this.doc.internal.pageSize.getWidth(),this.pageHeight=this.doc.internal.pageSize.getHeight(),this.pageMarginLeft=i.pageMarginLeft||0,this.pageMarginRight=i.pageMarginRight||0,this.pageMarginTop=i.pageMarginTop||0,this.pageMarginBottom=i.pageMarginBottom||0,this.maxLineWidth=this.pageWidth-this.pageMarginLeft-this.pageMarginRight,this.tocSections={},this.generateFromDocDefinition()}function extendJsPDFAPI(t){t(JsPDF.API)}Object.defineProperty(exports,"__esModule",{value:!0});var JsPDF=_interopDefault(require("jspdf")),DEFAULT_FONT_SIZE=18,DEFAULT_LINE_HEIGHT=1,DEFAULT_ALIGN="left",DEFAULT_FONT_NAME="helvetica",DEFAULT_FONT_STYLE="normal",DEFAULT_TEXT_COLOR="black",_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},slicedToArray=function(){function t(t,e){var i=[],n=!0,r=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(i.push(a.value),!e||i.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{!n&&s.return&&s.return()}finally{if(r)throw o}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();String.prototype.reverse=function(){return this.split("").reverse().join("")};var EPS=1e-5,lessThanOrEqual=function(t,e){return t<e||Math.abs(t-e)<EPS},removeCharactersToFitWidth=function(t,e,i,n){for(var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:" ",o=Array(i).fill(".").join("").concat(r),a=e-n(o),s="",c=0;c<t.length&&lessThanOrEqual(n(s.concat(t[c],o)),a);)s=s.concat(t[c]),c+=1;return s=s.concat(o)},addDotsToFitWidth=function(t,e,i){for(var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"  ",r=t;lessThanOrEqual(i(r.concat(".",n)),e);)r=r.concat(".");return r.concat(n)},connectWithDotsToFitLine=function(t,e){var i=Array(9).fill(".").join("").concat(t.linkPage),n=e(i),r=e(t.text),o=t.text,a=i;return t.lineWidth-r<n?o=removeCharactersToFitWidth(t.text,t.lineWidth-n,2,e):a=addDotsToFitWidth(i.reverse(),t.lineWidth-r,e).reverse(),[_extends({},t,{text:o}),_extends({},t,{text:a,xOffset:t.xOffset+t.lineWidth-e(a)})]};JsPDFMake.prototype.initTOC=function(){var t=this;this.tocSections={},this.docDefinition.content.filter(function(t){return t.toc}).forEach(function(e){var i=e.toc;if(t.tocSections[i.id])throw new Error("Duplicate table of contents id '"+i.id+"', please make sure all table of contents have a uniq id");var n=Object.assign({},i);delete n.id,t.tocSections[i.id]={items:[],options:n}})},JsPDFMake.prototype.transformTOCToContent=function(t){var e=t.options,i=t.items,n=[e.title];return i.forEach(function(t){var i=t.title,r=t.paragraphIndex,o=Object.assign({text:i,isLink:!0,linkParagraphIndex:r},e.itemOptions);n.push(o)}),n},JsPDFMake.prototype.updateTOCLinks=function(t){var e=this,i=0,n=0;return t.forEach(function(t){var r=0;t.isToc?(t.lines.forEach(function(i,o){r=i.pageNumber,i.pageNumber+=n,0===o&&(e.tocSections[t.id].pageNumber=i.pageNumber)}),i+=r):t.lines.forEach(function(t){t.pageNumber+=i,n=t.pageNumber})}),t.forEach(function(i){i.lines=i.lines.reduce(function(i,n){if(n.linkParagraphIndex>=0){var r=connectWithDotsToFitLine(_extends({},n,{linkPage:t[n.linkParagraphIndex].lines[0].pageNumber}),function(t){return e.doc.setFont(n.fontName,n.fontStyle).setFontSize(n.fontSize).getTextWidth(t)});return i.concat(r)}return i.concat(n)},[])}),t},JsPDFMake.prototype.size=function(){return this.doc.internal.pages.length-1},JsPDFMake.prototype.addPage=function(){var t=this.doc,e=this.getCurrentPageNumber();e===this.size()?t.addPage():t.insertPage(e)},JsPDFMake.prototype.clearDoc=function(){for(var t=this.doc;t.internal.pages.length>1;)t.deletePage(1);this.addPage()},JsPDFMake.prototype.updateDocDefinition=function(t){this.docDefinition=t,this.generateFromDocDefinition()},JsPDFMake.prototype.getCurrentPageNumber=function(){return this.doc.internal.getCurrentPageInfo().pageNumber},JsPDFMake.prototype.isCursorOutOfPageVertically=function(t){return t>this.pageHeight-this.pageMarginBottom},JsPDFMake.prototype.drawTextInLine=function(t){var e=t.text,i=t.fontSize,n=t.fontName,r=t.fontStyle,o=t.textColor,a=t.lineWidth,s=t.xOffset,c=t.yOffset,h=t.pageNumber,l=t.maxFontSize,f=t.isLink,g=t.linkPage,p=t.linkUrl,u=t.hasBullet,d=t.bulletSpacing,P=t.highlightColor,T=this.doc,v=i/2+i/4;if(P&&(T.setDrawColor(0),T.setFillColor(P[0],P[1],P[2]),T.rect(s,c,a,i,"F")),T.setPage(h).setFont(n,r).setFontSize(i).setTextColor(o),f){var F={pageNumber:g};p&&(F={url:p}),T.textWithLink(e,s,v+Math.max(i,l)-i+c,F)}else T.text(s,v+Math.max(i,l)-i+c,e);return u&&(T.setDrawColor(0),T.setFillColor(0,0,0),T.circle(s-d,c+v/1.8,i/7,"FD")),!0},JsPDFMake.prototype.drawParagraphs=function(t){var e=this;t.forEach(function(t){var i=t.lines;return(void 0===i?[]:i).forEach(function(t){for(;t.pageNumber>e.size();)e.addPage();e.drawTextInLine(t)})})},JsPDFMake.prototype.escapeSpecialCharacters=function(t){return t.replace(/[^A-Za-z 0-9 \n\t\.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g,"")},JsPDFMake.prototype.renderParagraph=function(t,e,i,n,r){var o=t.text,a=t.pageBreak,s=void 0===a?"none":a,c=t.fontSize,h=void 0===c?DEFAULT_FONT_SIZE:c,l=t.fontName,f=void 0===l?DEFAULT_FONT_NAME:l,g=t.fontStyle,p=void 0===g?DEFAULT_FONT_STYLE:g,u=t.textColor,d=void 0===u?DEFAULT_TEXT_COLOR:u,P=t.align,T=void 0===P?DEFAULT_ALIGN:P,v=t.marginTop,F=void 0===v?0:v,D=t.marginRight,x=void 0===D?0:D,m=t.marginBottom,y=void 0===m?0:m,O=t.marginLeft,k=void 0===O?0:O,E=t.tocIds,M=void 0===E?[]:E,b=t.tocItemText,L=t.isLink,S=void 0!==L&&L,C=t.linkPage,_=t.linkUrl,N=t.linkParagraphIndex,A=t.hasBullet,J=void 0!==A&&A,I=t.bulletSpacing,w=void 0===I?h:I,W=t.highlightColor,z=void 0!==W&&W,U=this,j=arguments.length>5&&void 0!==arguments[5]&&arguments[5],H=this.doc,B=this.maxLineWidth,R=this.tocSections,q=this.pageMarginLeft,X=this.pageMarginRight,Y=this.pageMarginTop,G=this.pageWidth;if("string"!=typeof o)return console.warn("Text is only supported as string format, this section will not be rendered => "+o),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:Z};("before"===s||this.isCursorOutOfPageVertically(i+h))&&(i=Y,n+=1),M.forEach(function(t){if(!R[t])throw new Error("Unknown table of contents id '"+t+"'");R[t].items.push({title:b||o,paragraphIndex:r})}),J&&(k+=w);var V=H.setFont(f,p).setFontSize(h).setTextColor(d).splitTextToSize(this.escapeSpecialCharacters(o),B-k-x);j&&(V=V.splice(0,j)),i+=F;var Z=[];return V.forEach(function(t,r){U.isCursorOutOfPageVertically(i+h)&&(i=Y,n+=1),e=q+k,"center"===T?e=G/2-H.getTextWidth(t)/2+k-x:"right"===T&&(e=G-H.getTextWidth(t)-X-x),Z.push({text:t,fontSize:h,fontName:f,fontStyle:p,textColor:d,lineWidth:G-X-x-q-k,xOffset:e,yOffset:i,pageNumber:n,maxFontSize:h,isLink:S,linkPage:C,linkUrl:_,linkParagraphIndex:N,hasBullet:0===r&&J,bulletSpacing:w,highlightColor:z}),i+=h}),i+=y,"after"===s&&(i=Y,n+=1),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:Z}},JsPDFMake.prototype.transformContentToDrawableParagraphs=function(t,e){var i=this,n=this.pageMarginTop,r=void 0,o=1;return t.map(function(a,s){if(a.toc)return o>1&&s<t.length-1&&(o+=1,n=i.pageMarginTop),{isToc:!0,id:a.toc.id};var c=i.renderParagraph(a,r,n,o,s,e),h=c.nextXOffset,l=c.nextYOffset,f=c.nextPage,g=c.lines;return n=l,r=h,o=f,{lines:g}}).filter(function(t){return t})},JsPDFMake.prototype.generateFromDocDefinition=function(){var t=this,e=this.docDefinition;this.clearDoc(),this.initTOC();var i=this.transformContentToDrawableParagraphs(e.content),n=this.tocSections;Object.entries(n).forEach(function(e){var n=slicedToArray(e,2),r=n[0],o=n[1],a=t.transformTOCToContent(o),s=t.transformContentToDrawableParagraphs(a,1);i.forEach(function(t){t.isToc&&t.id===r&&(t.lines=s.map(function(t){return t.lines}).flat())})}),this.drawParagraphs(this.updateTOCLinks(i)),this.renderFooterToPages()},JsPDFMake.prototype.renderFooterToPages=function(){var t=this.docDefinition,e=this.doc,i=this.tocSections,n=this.pageWidth,r=this.pageHeight,o=t.renderFooter;if(o)for(var a=1;a<=this.size();)e.setPage(a),o(e,a,{width:n,height:r},i),a+=1},JsPDFMake.prototype.download=function(){this.doc.save(this.title)},exports.JsPDFMake=JsPDFMake,exports.extendJsPDFAPI=extendJsPDFAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
