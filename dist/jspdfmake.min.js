"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function JsPDFMake(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.docDefinition=e;var n={orientation:"p",unit:"pt",format:"a4",hotfixes:[],lineHeight:DEFAULT_LINE_HEIGHT};this.options=_extends({},i),this.doc=new JsPDF(n).setProperties({title:t}),this.title=t,this.pageWidth=this.doc.internal.pageSize.getWidth(),this.pageHeight=this.doc.internal.pageSize.getHeight(),this.pageMarginLeft=i.pageMarginLeft||0,this.pageMarginRight=i.pageMarginRight||0,this.pageMarginTop=i.pageMarginTop||0,this.pageMarginBottom=i.pageMarginBottom||0,this.maxLineWidth=this.pageWidth-this.pageMarginLeft-this.pageMarginRight,this.tocSections={},this.generateFromDocDefinition()}function extendJsPDFAPI(t){t(JsPDF.API)}Object.defineProperty(exports,"__esModule",{value:!0});var JsPDF=_interopDefault(require("jspdf")),DEFAULT_FONT_SIZE=18,DEFAULT_LINE_HEIGHT=1,DEFAULT_ALIGN="left",DEFAULT_FONT_NAME="helvetica",DEFAULT_FONT_STYLE="normal",DEFAULT_TEXT_COLOR="black",_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},slicedToArray=function(){function t(t,e){var i=[],n=!0,r=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(i.push(a.value),!e||i.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{!n&&s.return&&s.return()}finally{if(r)throw o}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();String.prototype.reverse=function(){return this.split("").reverse().join("")};var EPS=1e-5,lessThanOrEqual=function(t,e){return t<e||Math.abs(t-e)<EPS},removeCharactersToFitWidth=function(t,e,i,n){for(var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:" ",o=Array(i).fill(".").join("").concat(r),a=e-n(o),s="",c=0;c<t.length&&lessThanOrEqual(n(s.concat(t[c],o)),a);)s=s.concat(t[c]),c+=1;return s=s.concat(o)},addDotsToFitWidth=function(t,e,i){for(var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"  ",r=t;lessThanOrEqual(i(r.concat(".",n)),e);)r=r.concat(".");return r.concat(n)},connectWithDotsToFitLine=function(t,e){var i=Array(9).fill(".").join("").concat(t.linkPage),n=e(i),r=e(t.text),o=t.text,a=i;return t.lineWidth-r<n?o=removeCharactersToFitWidth(t.text,t.lineWidth-n,2,e):a=addDotsToFitWidth(i.reverse(),t.lineWidth-r,e).reverse(),[_extends({},t,{text:o}),_extends({},t,{text:a,xOffset:t.xOffset+t.lineWidth-e(a)})]};JsPDFMake.prototype.initTOC=function(){var t=this;this.tocSections={},this.docDefinition.content.filter(function(t){return t.toc}).forEach(function(e){var i=e.toc;if(t.tocSections[i.id])throw new Error("Duplicate table of contents id '"+i.id+"', please make sure all table of contents have a uniq id");var n=Object.assign({},i);delete n.id,t.tocSections[i.id]={items:[],options:n}})},JsPDFMake.prototype.transformTOCToContent=function(t){var e=t.options,i=t.items,n=[e.title];return i.forEach(function(t){var i=t.title,r=t.paragraphIndex,o=Object.assign({text:i,isLink:!0,linkParagraphIndex:r},e.itemOptions);n.push(o)}),n},JsPDFMake.prototype.updateTOCLinks=function(t){var e=this,i=0,n=0;return t.forEach(function(t){var r=0;t.isToc?(t.lines.forEach(function(i,o){r=i.pageNumber,i.pageNumber+=n,0===o&&(e.tocSections[t.id].pageNumber=i.pageNumber)}),i+=r):t.lines.forEach(function(t){t.pageNumber+=i,n=t.pageNumber})}),t.forEach(function(i){i.lines=i.lines.reduce(function(i,n){if(n.linkParagraphIndex>=0){var r=connectWithDotsToFitLine(_extends({},n,{linkPage:t[n.linkParagraphIndex].lines[0].pageNumber}),function(t){return e.doc.setFont(n.fontName,n.fontStyle).setFontSize(n.fontSize).getTextWidth(t)});return i.concat(r)}return i.concat(n)},[])}),t},JsPDFMake.prototype.size=function(){return this.doc.internal.pages.length-1},JsPDFMake.prototype.addPage=function(){var t=this.doc,e=this.getCurrentPageNumber();e===this.size()?t.addPage():t.insertPage(e)},JsPDFMake.prototype.clearDoc=function(){for(var t=this.doc;t.internal.pages.length>1;)t.deletePage(1);this.addPage()},JsPDFMake.prototype.updateDocDefinition=function(t){this.docDefinition=t,this.generateFromDocDefinition()},JsPDFMake.prototype.getCurrentPageNumber=function(){return this.doc.internal.pages[1]&&this.doc.internal.getCurrentPageInfo().pageNumber||0},JsPDFMake.prototype.isCursorOutOfPageVertically=function(t){return t>this.pageHeight-this.pageMarginBottom},JsPDFMake.prototype.drawTextInLine=function(t){var e=t.text,i=t.fontSize,n=t.fontName,r=t.fontStyle,o=t.textColor,a=t.lineWidth,s=t.xOffset,c=t.yOffset,h=t.pageNumber,l=t.maxFontSize,f=t.isLink,g=t.linkPage,p=t.linkUrl,u=t.hasBullet,d=t.bulletSpacing,P=t.highlightColor,T=this.doc,v=i/2+i/4;if(P&&(T.setDrawColor(0),T.setFillColor(P[0],P[1],P[2]),T.rect(s,c,a,i,"F")),T.setPage(h).setFont(n,r).setFontSize(i).setTextColor(o),f){var D={pageNumber:g};p&&(D={url:p}),T.textWithLink(e,s,v+Math.max(i,l)-i+c,D)}else T.text(s,v+Math.max(i,l)-i+c,e);return u&&(T.setDrawColor(0),T.setFillColor(0,0,0),T.circle(s-d,c+v/1.8,i/7,"FD")),!0},JsPDFMake.prototype.drawParagraphs=function(t){var e=this;t.forEach(function(t){var i=t.lines;return(void 0===i?[]:i).forEach(function(t){for(;t.pageNumber>e.size();)e.addPage();e.drawTextInLine(t)})})},JsPDFMake.prototype.escapeSpecialCharacters=function(t){return t.replace(/[^A-Za-z 0-9 \n\t\.,\?""!@#\$%\^&\*\(\)'-_=\+;:<>\/\\\|\}\{\[\]`~]*/g,"")},JsPDFMake.prototype.renderParagraph=function(t,e,i,n,r){var o=t.text,a=t.pageBreak,s=void 0===a?"none":a,c=t.fontSize,h=void 0===c?DEFAULT_FONT_SIZE:c,l=t.fontName,f=void 0===l?DEFAULT_FONT_NAME:l,g=t.fontStyle,p=void 0===g?DEFAULT_FONT_STYLE:g,u=t.textColor,d=void 0===u?DEFAULT_TEXT_COLOR:u,P=t.align,T=void 0===P?DEFAULT_ALIGN:P,v=t.marginTop,D=void 0===v?0:v,F=t.marginRight,x=void 0===F?0:F,m=t.marginBottom,y=void 0===m?0:m,O=t.marginLeft,k=void 0===O?0:O,E=t.tocIds,M=void 0===E?[]:E,S=t.tocItemText,b=t.isLink,L=void 0!==b&&b,C=t.linkPage,_=t.linkUrl,N=t.linkParagraphIndex,A=t.hasBullet,J=void 0!==A&&A,I=t.bulletSpacing,w=void 0===I?h:I,W=t.highlightColor,z=void 0!==W&&W,U=this,j=arguments.length>5&&void 0!==arguments[5]&&arguments[5],H=this.doc,B=this.maxLineWidth,R=this.tocSections,q=this.pageMarginLeft,X=this.pageMarginRight,Y=this.pageMarginTop,G=this.pageWidth;if("string"!=typeof o)return console.warn("Text is only supported as string format, this section will not be rendered => "+o),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:Z};("before"===s||this.isCursorOutOfPageVertically(i+h))&&(i=Y,n+=1),M.forEach(function(t){if(!R[t])throw new Error("Unknown table of contents id '"+t+"'");R[t].items.push({title:S||o,paragraphIndex:r})}),J&&(k+=w);var V=H.setFont(f,p).setFontSize(h).setTextColor(d).splitTextToSize(this.escapeSpecialCharacters(o),B-k-x);j&&(V=V.splice(0,j)),i+=D;var Z=[];return V.forEach(function(t,r){U.isCursorOutOfPageVertically(i+h)&&(i=Y,n+=1),e=q+k,"center"===T?e=G/2-H.getTextWidth(t)/2+k-x:"right"===T&&(e=G-H.getTextWidth(t)-X-x),Z.push({text:t,fontSize:h,fontName:f,fontStyle:p,textColor:d,lineWidth:G-X-x-q-k,xOffset:e,yOffset:i,pageNumber:n,maxFontSize:h,isLink:L,linkPage:C,linkUrl:_,linkParagraphIndex:N,hasBullet:0===r&&J,bulletSpacing:w,highlightColor:z}),i+=h}),i+=y,"after"===s&&(i=Y,n+=1),{nextXOffset:e,nextYOffset:i,nextPage:n,lines:Z}},JsPDFMake.prototype.transformContentToDrawableParagraphs=function(t,e){var i=this,n=this.pageMarginTop,r=void 0,o=1;return t.map(function(a,s){if(a.toc)return o>1&&s<t.length-1&&(o+=1,n=i.pageMarginTop),{isToc:!0,id:a.toc.id};var c=i.renderParagraph(a,r,n,o,s,e),h=c.nextXOffset,l=c.nextYOffset,f=c.nextPage,g=c.lines;return n=l,r=h,o=f,{lines:g}}).filter(function(t){return t})},JsPDFMake.prototype.generateFromDocDefinition=function(){var t=this,e=this.docDefinition;this.clearDoc(),this.initTOC();var i=this.transformContentToDrawableParagraphs(e.content),n=this.tocSections;Object.entries(n).forEach(function(e){var n=slicedToArray(e,2),r=n[0],o=n[1],a=t.transformTOCToContent(o),s=t.transformContentToDrawableParagraphs(a,1);i.forEach(function(t){t.isToc&&t.id===r&&(t.lines=s.map(function(t){return t.lines}).flat())})}),this.drawParagraphs(this.updateTOCLinks(i)),this.renderStampToPages()},JsPDFMake.prototype.renderStampToPages=function(){var t=this.docDefinition,e=this.doc,i=this.tocSections,n=this.pageWidth,r=this.pageHeight,o=t.renderStamp,a=t.renderFooter;if(a&&(console.warn("Depricated usage renderFooter, use renderStamp instead"),o=a),o)for(var s=1;s<=this.size();)e.setPage(s),o(e,s,{width:n,height:r},i),s+=1},JsPDFMake.prototype.download=function(){this.doc.save(this.title)},exports.JsPDFMake=JsPDFMake,exports.extendJsPDFAPI=extendJsPDFAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyIsIi4uL3NyYy9jb25zdGFudHMuanMiLCIuLi9zcmMvdXRpbHMuanMiLCIuLi9zcmMvdG9jLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKc1BERiBmcm9tICdqc3BkZic7XG5pbXBvcnQge1xuICBERUZBVUxUX0xJTkVfSEVJR0hULFxuICBERUZBVUxUX0FMSUdOLFxuICBERUZBVUxUX0ZPTlRfU0laRSxcbiAgREVGQVVMVF9GT05UX05BTUUsXG4gIERFRkFVTFRfRk9OVF9TVFlMRSxcbiAgREVGQVVMVF9URVhUX0NPTE9SXG59IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCAnLi90b2MnO1xuXG5leHBvcnQgZnVuY3Rpb24gSnNQREZNYWtlKHRpdGxlLCBkb2NEZWZpbml0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgdGhpcy5kb2NEZWZpbml0aW9uID0gZG9jRGVmaW5pdGlvbjtcbiAgY29uc3QganNQZGZPcHRpb25zID0ge1xuICAgIG9yaWVudGF0aW9uOiAncCcsXG4gICAgdW5pdDogJ3B0JyxcbiAgICBmb3JtYXQ6ICdhNCcsXG4gICAgaG90Zml4ZXM6IFtdLCAvLyBhbiBhcnJheSBvZiBob3RmaXggc3RyaW5ncyB0byBlbmFibGVcbiAgICBsaW5lSGVpZ2h0OiBERUZBVUxUX0xJTkVfSEVJR0hUXG4gIH07XG4gIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICB0aGlzLmRvYyA9IG5ldyBKc1BERihqc1BkZk9wdGlvbnMpLnNldFByb3BlcnRpZXMoe1xuICAgIHRpdGxlXG4gIH0pO1xuICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gIHRoaXMucGFnZVdpZHRoID0gdGhpcy5kb2MuaW50ZXJuYWwucGFnZVNpemUuZ2V0V2lkdGgoKTtcbiAgdGhpcy5wYWdlSGVpZ2h0ID0gdGhpcy5kb2MuaW50ZXJuYWwucGFnZVNpemUuZ2V0SGVpZ2h0KCk7XG4gIHRoaXMucGFnZU1hcmdpbkxlZnQgPSBvcHRpb25zLnBhZ2VNYXJnaW5MZWZ0IHx8IDA7XG4gIHRoaXMucGFnZU1hcmdpblJpZ2h0ID0gb3B0aW9ucy5wYWdlTWFyZ2luUmlnaHQgfHwgMDtcbiAgdGhpcy5wYWdlTWFyZ2luVG9wID0gb3B0aW9ucy5wYWdlTWFyZ2luVG9wIHx8IDA7XG4gIHRoaXMucGFnZU1hcmdpbkJvdHRvbSA9IG9wdGlvbnMucGFnZU1hcmdpbkJvdHRvbSB8fCAwO1xuICB0aGlzLm1heExpbmVXaWR0aCA9XG4gICAgdGhpcy5wYWdlV2lkdGggLSB0aGlzLnBhZ2VNYXJnaW5MZWZ0IC0gdGhpcy5wYWdlTWFyZ2luUmlnaHQ7XG4gIHRoaXMudG9jU2VjdGlvbnMgPSB7fTtcbiAgdGhpcy5nZW5lcmF0ZUZyb21Eb2NEZWZpbml0aW9uKCk7XG59XG5cbkpzUERGTWFrZS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIHNpemUoKSB7XG4gIHJldHVybiB0aGlzLmRvYy5pbnRlcm5hbC5wYWdlcy5sZW5ndGggLSAxO1xufTtcblxuSnNQREZNYWtlLnByb3RvdHlwZS5hZGRQYWdlID0gZnVuY3Rpb24gYWRkUGFnZSgpIHtcbiAgY29uc3QgeyBkb2MgfSA9IHRoaXM7XG4gIGNvbnN0IGN1cnJlbnRQYWdlID0gdGhpcy5nZXRDdXJyZW50UGFnZU51bWJlcigpO1xuICBpZiAoY3VycmVudFBhZ2UgPT09IHRoaXMuc2l6ZSgpKSB7XG4gICAgZG9jLmFkZFBhZ2UoKTtcbiAgfSBlbHNlIHtcbiAgICBkb2MuaW5zZXJ0UGFnZShjdXJyZW50UGFnZSk7XG4gIH1cbn07XG5cbkpzUERGTWFrZS5wcm90b3R5cGUuY2xlYXJEb2MgPSBmdW5jdGlvbiBjbGVhckRvYygpIHtcbiAgY29uc3QgeyBkb2MgfSA9IHRoaXM7XG4gIHdoaWxlIChkb2MuaW50ZXJuYWwucGFnZXMubGVuZ3RoID4gMSkge1xuICAgIGRvYy5kZWxldGVQYWdlKDEpO1xuICB9XG4gIHRoaXMuYWRkUGFnZSgpO1xufTtcblxuSnNQREZNYWtlLnByb3RvdHlwZS51cGRhdGVEb2NEZWZpbml0aW9uID0gZnVuY3Rpb24gdXBkYXRlRG9jRGVmaW5pdGlvbihcbiAgZG9jRGVmaW5pdGlvblxuKSB7XG4gIHRoaXMuZG9jRGVmaW5pdGlvbiA9IGRvY0RlZmluaXRpb247XG4gIHRoaXMuZ2VuZXJhdGVGcm9tRG9jRGVmaW5pdGlvbigpO1xufTtcblxuSnNQREZNYWtlLnByb3RvdHlwZS5nZXRDdXJyZW50UGFnZU51bWJlciA9IGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlTnVtYmVyKCkge1xuICByZXR1cm4gKHRoaXMuZG9jLmludGVybmFsLnBhZ2VzWzFdICYmIHRoaXMuZG9jLmludGVybmFsLmdldEN1cnJlbnRQYWdlSW5mbygpLnBhZ2VOdW1iZXIpIHx8IDA7XG59O1xuXG5Kc1BERk1ha2UucHJvdG90eXBlLmlzQ3Vyc29yT3V0T2ZQYWdlVmVydGljYWxseSA9IGZ1bmN0aW9uIGlzQ3Vyc29yT3V0T2ZQYWdlVmVydGljYWxseShcbiAgeU9mZnNldFxuKSB7XG4gIHJldHVybiB5T2Zmc2V0ID4gdGhpcy5wYWdlSGVpZ2h0IC0gdGhpcy5wYWdlTWFyZ2luQm90dG9tO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBiZSBpbmxpbmVkXG4gKiBAcGFyYW0ge051bWJlcn0geE9mZnNldCBUaGUgeCBvZmZzZXQgZm9yIHRoZSBuZXcgdGV4dFxuICogQHBhcmFtIHtOdW1iZXJ9IHlPZmZzZXQgVGhlIHkgb2Zmc2V0IGZvciB0aGUgbmV3IHRleHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBmb250U2l6ZSBUaGUgZm9udCBzaXplIGZvciB0aGUgbmV3IHRleHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhGb250U2l6ZSBUaGUgbWF4aW11bSBmb250IHNpemUgaW4gdGhpcyBsaW5lLlxuICogQHBhcmFtIHtTdHJpbmd9IGFsaWduIEVpdGhlciAnbGVmdCcsICdyaWdodCcgb3IgJ2NlbnRlcicsIGRlZmF1bHQgaXMgJ2xlZnQnXG4gKi9cbkpzUERGTWFrZS5wcm90b3R5cGUuZHJhd1RleHRJbkxpbmUgPSBmdW5jdGlvbiBkcmF3VGV4dEluTGluZSh7XG4gIHRleHQsXG4gIGZvbnRTaXplLFxuICBmb250TmFtZSxcbiAgZm9udFN0eWxlLFxuICB0ZXh0Q29sb3IsXG4gIGxpbmVXaWR0aCxcbiAgeE9mZnNldCxcbiAgeU9mZnNldCxcbiAgcGFnZU51bWJlcixcbiAgbWF4Rm9udFNpemUsXG4gIGlzTGluayxcbiAgbGlua1BhZ2UsXG4gIGxpbmtVcmwsXG4gIGhhc0J1bGxldCxcbiAgYnVsbGV0U3BhY2luZyxcbiAgaGlnaGxpZ2h0Q29sb3Jcbn0pIHtcbiAgY29uc3QgeyBkb2MgfSA9IHRoaXM7XG4gIGNvbnN0IGNlbnRlciA9IGZvbnRTaXplIC8gMi4wICsgZm9udFNpemUgLyA0LjA7IC8vIFRoZSByZW5kZXJlciBzdGFydHMgZHJhd2luZyB0ZXh0IGF0IHRoZSBjZW50ZXJcbiAgaWYgKGhpZ2hsaWdodENvbG9yKSB7XG4gICAgZG9jLnNldERyYXdDb2xvcigwKTtcbiAgICBkb2Muc2V0RmlsbENvbG9yKGhpZ2hsaWdodENvbG9yWzBdLCBoaWdobGlnaHRDb2xvclsxXSwgaGlnaGxpZ2h0Q29sb3JbMl0pO1xuICAgIGRvYy5yZWN0KHhPZmZzZXQsIHlPZmZzZXQsIGxpbmVXaWR0aCwgZm9udFNpemUsICdGJyk7XG4gIH1cbiAgZG9jXG4gICAgLnNldFBhZ2UocGFnZU51bWJlcilcbiAgICAuc2V0Rm9udChmb250TmFtZSwgZm9udFN0eWxlKVxuICAgIC5zZXRGb250U2l6ZShmb250U2l6ZSlcbiAgICAuc2V0VGV4dENvbG9yKHRleHRDb2xvcik7XG4gIGlmIChpc0xpbmspIHtcbiAgICBsZXQgbGluayA9IHtcbiAgICAgIHBhZ2VOdW1iZXI6IGxpbmtQYWdlXG4gICAgfTtcbiAgICBpZiAobGlua1VybCkge1xuICAgICAgbGluayA9IHtcbiAgICAgICAgdXJsOiBsaW5rVXJsXG4gICAgICB9O1xuICAgIH1cbiAgICBkb2MudGV4dFdpdGhMaW5rKFxuICAgICAgdGV4dCxcbiAgICAgIHhPZmZzZXQsXG4gICAgICBjZW50ZXIgKyBNYXRoLm1heChmb250U2l6ZSwgbWF4Rm9udFNpemUpIC0gZm9udFNpemUgKyB5T2Zmc2V0LFxuICAgICAgbGlua1xuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgZG9jLnRleHQoXG4gICAgICB4T2Zmc2V0LFxuICAgICAgY2VudGVyICsgTWF0aC5tYXgoZm9udFNpemUsIG1heEZvbnRTaXplKSAtIGZvbnRTaXplICsgeU9mZnNldCxcbiAgICAgIHRleHRcbiAgICApO1xuICB9XG4gIGlmIChoYXNCdWxsZXQpIHtcbiAgICBkb2Muc2V0RHJhd0NvbG9yKDApO1xuICAgIGRvYy5zZXRGaWxsQ29sb3IoMCwgMCwgMCk7XG4gICAgZG9jLmNpcmNsZShcbiAgICAgIHhPZmZzZXQgLSBidWxsZXRTcGFjaW5nLFxuICAgICAgeU9mZnNldCArIGNlbnRlciAvIDEuOCxcbiAgICAgIGZvbnRTaXplIC8gNy4wLFxuICAgICAgJ0ZEJ1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5Kc1BERk1ha2UucHJvdG90eXBlLmRyYXdQYXJhZ3JhcGhzID0gZnVuY3Rpb24gZHJhd1BhcmFncmFwaHMocGFyYWdyYXBocykge1xuICBwYXJhZ3JhcGhzLmZvckVhY2goKHsgbGluZXMgPSBbXSB9KSA9PlxuICAgIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICB3aGlsZSAobGluZS5wYWdlTnVtYmVyID4gdGhpcy5zaXplKCkpIHtcbiAgICAgICAgdGhpcy5hZGRQYWdlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRyYXdUZXh0SW5MaW5lKGxpbmUpO1xuICAgIH0pXG4gICk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYW55IHNwZWNpYWwgY2hhcmFjdGVycyBmcm9tIHRoZSBnaXZlbiB0ZXh0XG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBiZSB0cmFuc2Zvcm1lZFxuICovXG5Kc1BERk1ha2UucHJvdG90eXBlLmVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzID0gZnVuY3Rpb24gZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMoXG4gIHRleHRcbikge1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKFxuICAgIC9bXkEtWmEteiAwLTkgXFxuXFx0XFwuLFxcP1wiXCIhQCNcXCQlXFxeJlxcKlxcKFxcKSctXz1cXCs7Ojw+XFwvXFxcXFxcfFxcfVxce1xcW1xcXWB+XSovZyxcbiAgICAnJ1xuICApO1xufTtcblxuSnNQREZNYWtlLnByb3RvdHlwZS5yZW5kZXJQYXJhZ3JhcGggPSBmdW5jdGlvbiByZW5kZXJQYXJhZ3JhcGgoXG4gIHtcbiAgICB0ZXh0LFxuICAgIHBhZ2VCcmVhayA9ICdub25lJyxcbiAgICBmb250U2l6ZSA9IERFRkFVTFRfRk9OVF9TSVpFLFxuICAgIGZvbnROYW1lID0gREVGQVVMVF9GT05UX05BTUUsXG4gICAgZm9udFN0eWxlID0gREVGQVVMVF9GT05UX1NUWUxFLFxuICAgIHRleHRDb2xvciA9IERFRkFVTFRfVEVYVF9DT0xPUixcbiAgICBhbGlnbiA9IERFRkFVTFRfQUxJR04sXG4gICAgbWFyZ2luVG9wID0gMCxcbiAgICBtYXJnaW5SaWdodCA9IDAsXG4gICAgbWFyZ2luQm90dG9tID0gMCxcbiAgICBtYXJnaW5MZWZ0ID0gMCxcbiAgICB0b2NJZHMgPSBbXSxcbiAgICB0b2NJdGVtVGV4dCxcbiAgICBpc0xpbmsgPSBmYWxzZSxcbiAgICBsaW5rUGFnZSxcbiAgICBsaW5rVXJsLFxuICAgIGxpbmtQYXJhZ3JhcGhJbmRleCxcbiAgICBoYXNCdWxsZXQgPSBmYWxzZSxcbiAgICBidWxsZXRTcGFjaW5nID0gZm9udFNpemUsXG4gICAgaGlnaGxpZ2h0Q29sb3IgPSBmYWxzZVxuICB9LFxuICB4T2Zmc2V0LFxuICB5T2Zmc2V0LFxuICBwYWdlTnVtYmVyLFxuICBwYXJhZ3JhcGhJbmRleCxcbiAgbWF4TGluZXNQZXJQYXJhZ3JhcGggPSBmYWxzZVxuKSB7XG4gIGNvbnN0IHtcbiAgICBkb2MsXG4gICAgbWF4TGluZVdpZHRoLFxuICAgIHRvY1NlY3Rpb25zLFxuICAgIHBhZ2VNYXJnaW5MZWZ0LFxuICAgIHBhZ2VNYXJnaW5SaWdodCxcbiAgICBwYWdlTWFyZ2luVG9wLFxuICAgIHBhZ2VXaWR0aFxuICB9ID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVE9ETzogSEFORExFIElOTElORSBURVhUIE9CSkVDVFNcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgVGV4dCBpcyBvbmx5IHN1cHBvcnRlZCBhcyBzdHJpbmcgZm9ybWF0LCB0aGlzIHNlY3Rpb24gd2lsbCBub3QgYmUgcmVuZGVyZWQgPT4gJHt0ZXh0fWBcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0WE9mZnNldDogeE9mZnNldCxcbiAgICAgIG5leHRZT2Zmc2V0OiB5T2Zmc2V0LFxuICAgICAgbmV4dFBhZ2U6IHBhZ2VOdW1iZXIsXG4gICAgICBsaW5lc1xuICAgIH07XG4gIH1cbiAgaWYgKFxuICAgIHBhZ2VCcmVhayA9PT0gJ2JlZm9yZScgfHxcbiAgICB0aGlzLmlzQ3Vyc29yT3V0T2ZQYWdlVmVydGljYWxseSh5T2Zmc2V0ICsgZm9udFNpemUpXG4gICkge1xuICAgIC8vIGlmIHBhZ2UgYnJlYWsgYmVmb3JlIG9yIG5leHQgbGluZSBjYW4ndCBiZSB3cml0dGVuIHJlc2V0IG9mZnNldCBhbmQgYWRkIGEgbmV3IHBhZ2VcbiAgICB5T2Zmc2V0ID0gcGFnZU1hcmdpblRvcDtcbiAgICAvLyB0aGlzLmFkZFBhZ2UoKTtcbiAgICBwYWdlTnVtYmVyICs9IDE7XG4gIH1cblxuICAvLyBJbnNlcnQgdGhpcyBwYXJhZ3JhcGggdG8gaXRzIHRvYyBzZWN0aW9uIGlmIGFueVxuICB0b2NJZHMuZm9yRWFjaCh0b2NJZCA9PiB7XG4gICAgaWYgKCF0b2NTZWN0aW9uc1t0b2NJZF0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB0YWJsZSBvZiBjb250ZW50cyBpZCAnJHt0b2NJZH0nYCk7XG4gICAgfVxuICAgIHRvY1NlY3Rpb25zW3RvY0lkXS5pdGVtcy5wdXNoKHtcbiAgICAgIHRpdGxlOiB0b2NJdGVtVGV4dCB8fCB0ZXh0LFxuICAgICAgcGFyYWdyYXBoSW5kZXhcbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKGhhc0J1bGxldCkge1xuICAgIC8vIGdpdmUgc29tZSBzcGFjZSBmb3IgdGhlIGJ1bGxldCBwb2ludFxuICAgIG1hcmdpbkxlZnQgKz0gYnVsbGV0U3BhY2luZztcbiAgfVxuICAvLyBzcGxpdFRleHRUb1NpemUgdGFrZXMgeW91ciBzdHJpbmcgYW5kIHR1cm5zIGl0IGluIHRvIGFuIGFycmF5IG9mIHN0cmluZ3MsXG4gIC8vIGVhY2ggb2Ygd2hpY2ggY2FuIGJlIGRpc3BsYXllZCB3aXRoaW4gdGhlIHNwZWNpZmllZCBtYXhMaW5lV2lkdGguXG4gIGxldCB0ZXh0TGluZXMgPSBkb2NcbiAgICAuc2V0Rm9udChmb250TmFtZSwgZm9udFN0eWxlKVxuICAgIC5zZXRGb250U2l6ZShmb250U2l6ZSlcbiAgICAuc2V0VGV4dENvbG9yKHRleHRDb2xvcilcbiAgICAuc3BsaXRUZXh0VG9TaXplKFxuICAgICAgdGhpcy5lc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyh0ZXh0KSxcbiAgICAgIG1heExpbmVXaWR0aCAtIG1hcmdpbkxlZnQgLSBtYXJnaW5SaWdodFxuICAgICk7XG5cbiAgaWYgKG1heExpbmVzUGVyUGFyYWdyYXBoKSB7XG4gICAgdGV4dExpbmVzID0gdGV4dExpbmVzLnNwbGljZSgwLCBtYXhMaW5lc1BlclBhcmFncmFwaCk7XG4gIH1cblxuICB5T2Zmc2V0ICs9IG1hcmdpblRvcDtcblxuICBjb25zdCBsaW5lcyA9IFtdO1xuXG4gIC8vIGRvYy50ZXh0IGNhbiBub3cgYWRkIHRob3NlIGxpbmVzIGVhc2lseTsgb3RoZXJ3aXNlLCBpdCB3b3VsZCBoYXZlIHJ1biB0ZXh0IG9mZiB0aGUgc2NyZWVuIVxuICB0ZXh0TGluZXMuZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcbiAgICBpZiAodGhpcy5pc0N1cnNvck91dE9mUGFnZVZlcnRpY2FsbHkoeU9mZnNldCArIGZvbnRTaXplKSkge1xuICAgICAgLy8gaWYgbmV4dCBsaW5lIGNhbid0IGJlIHdyaXR0ZW4gcmVzZXQgb2Zmc2V0IGFuZCBhZGQgYSBuZXcgcGFnZVxuICAgICAgeU9mZnNldCA9IHBhZ2VNYXJnaW5Ub3A7XG4gICAgICAvLyB0aGlzLmFkZFBhZ2UoKTtcbiAgICAgIHBhZ2VOdW1iZXIgKz0gMTtcbiAgICB9XG4gICAgeE9mZnNldCA9IHBhZ2VNYXJnaW5MZWZ0ICsgbWFyZ2luTGVmdDtcbiAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICB4T2Zmc2V0ID1cbiAgICAgICAgcGFnZVdpZHRoIC8gMi4wIC1cbiAgICAgICAgZG9jLmdldFRleHRXaWR0aChsaW5lKSAvIDIuMCArXG4gICAgICAgIG1hcmdpbkxlZnQgLVxuICAgICAgICBtYXJnaW5SaWdodDtcbiAgICB9IGVsc2UgaWYgKGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB4T2Zmc2V0ID1cbiAgICAgICAgcGFnZVdpZHRoIC0gZG9jLmdldFRleHRXaWR0aChsaW5lKSAtIHBhZ2VNYXJnaW5SaWdodCAtIG1hcmdpblJpZ2h0O1xuICAgIH1cbiAgICBsaW5lcy5wdXNoKHtcbiAgICAgIHRleHQ6IGxpbmUsXG4gICAgICBmb250U2l6ZSxcbiAgICAgIGZvbnROYW1lLFxuICAgICAgZm9udFN0eWxlLFxuICAgICAgdGV4dENvbG9yLFxuICAgICAgbGluZVdpZHRoOlxuICAgICAgICBwYWdlV2lkdGggLSBwYWdlTWFyZ2luUmlnaHQgLSBtYXJnaW5SaWdodCAtIHBhZ2VNYXJnaW5MZWZ0IC0gbWFyZ2luTGVmdCxcbiAgICAgIHhPZmZzZXQsXG4gICAgICB5T2Zmc2V0LFxuICAgICAgcGFnZU51bWJlcixcbiAgICAgIG1heEZvbnRTaXplOiBmb250U2l6ZSxcbiAgICAgIGlzTGluayxcbiAgICAgIGxpbmtQYWdlLFxuICAgICAgbGlua1VybCxcbiAgICAgIGxpbmtQYXJhZ3JhcGhJbmRleCxcbiAgICAgIGhhc0J1bGxldDogaW5kZXggPT09IDAgJiYgaGFzQnVsbGV0LCAvLyBvbmx5IGZpcnN0IGxpbmUgc2hvdWxkIGNvbnRhaW4gdGhlIGJ1bGxldCBwb2ludFxuICAgICAgYnVsbGV0U3BhY2luZyxcbiAgICAgIGhpZ2hsaWdodENvbG9yXG4gICAgfSk7XG4gICAgeU9mZnNldCA9IHlPZmZzZXQgKyBmb250U2l6ZTtcbiAgICAvLyBUT0RPIFVTRSBUSElTIElGIENVUlNPUiBJUyBTVElMTCBJTiBUSEUgU0FNRSBMSU5FXG4gICAgLy8geU9mZnNldCA9IHlPZmZzZXQgKyBNYXRoLm1heChmb250U2l6ZSwgbWF4Rm9udFNpemUpO1xuICAgIC8vIHhPZmZzZXQgPSB4T2Zmc2V0ICsgZG9jLmdldFRleHRXaWR0aChgJHt0ZXh0fSBgKTtcbiAgfSk7XG5cbiAgeU9mZnNldCArPSBtYXJnaW5Cb3R0b207XG5cbiAgaWYgKHBhZ2VCcmVhayA9PT0gJ2FmdGVyJykge1xuICAgIHlPZmZzZXQgPSBwYWdlTWFyZ2luVG9wO1xuICAgIC8vIHRoaXMuYWRkUGFnZSgpO1xuICAgIHBhZ2VOdW1iZXIgKz0gMTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmV4dFhPZmZzZXQ6IHhPZmZzZXQsXG4gICAgbmV4dFlPZmZzZXQ6IHlPZmZzZXQsXG4gICAgbmV4dFBhZ2U6IHBhZ2VOdW1iZXIsXG4gICAgbGluZXNcbiAgfTtcbn07XG5cbkpzUERGTWFrZS5wcm90b3R5cGUudHJhbnNmb3JtQ29udGVudFRvRHJhd2FibGVQYXJhZ3JhcGhzID0gZnVuY3Rpb24gdHJhbnNmb3JtQ29udGVudFRvRHJhd2FibGVQYXJhZ3JhcGhzKFxuICBjb250ZW50LFxuICBtYXhMaW5lc1BlclBhcmFncmFwaFxuKSB7XG4gIGxldCB5T2Zmc2V0ID0gdGhpcy5wYWdlTWFyZ2luVG9wO1xuICBsZXQgeE9mZnNldDtcbiAgbGV0IGN1cnJlbnRQYWdlID0gMTtcbiAgcmV0dXJuIGNvbnRlbnRcbiAgICAubWFwKChwYXJhbXMsIGluZGV4KSA9PiB7XG4gICAgICBpZiAocGFyYW1zLnRvYykge1xuICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAxICYmIGluZGV4IDwgY29udGVudC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgLy8gaWYgaXQncyBub3QgdGhlIGZpcnN0IHBhZ2UgYW5kIGl0J3Mgbm90IHRoZSBsYXN0IHBhZ2UgYWRkIGFub3RoZXIgcGFnZSBhZnRlciB0aGUgdG9jIGZvciB0aGUgbmV4dCBjb250ZW50XG4gICAgICAgICAgY3VycmVudFBhZ2UgKz0gMTtcbiAgICAgICAgICB5T2Zmc2V0ID0gdGhpcy5wYWdlTWFyZ2luVG9wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNUb2M6IHRydWUsXG4gICAgICAgICAgaWQ6IHBhcmFtcy50b2MuaWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV4dFhPZmZzZXQsXG4gICAgICAgIG5leHRZT2Zmc2V0LFxuICAgICAgICBuZXh0UGFnZSxcbiAgICAgICAgbGluZXNcbiAgICAgIH0gPSB0aGlzLnJlbmRlclBhcmFncmFwaChcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICB4T2Zmc2V0LFxuICAgICAgICB5T2Zmc2V0LFxuICAgICAgICBjdXJyZW50UGFnZSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIG1heExpbmVzUGVyUGFyYWdyYXBoXG4gICAgICApO1xuICAgICAgeU9mZnNldCA9IG5leHRZT2Zmc2V0O1xuICAgICAgeE9mZnNldCA9IG5leHRYT2Zmc2V0O1xuICAgICAgY3VycmVudFBhZ2UgPSBuZXh0UGFnZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVzXG4gICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcihhID0+IGEpO1xufTtcblxuSnNQREZNYWtlLnByb3RvdHlwZS5nZW5lcmF0ZUZyb21Eb2NEZWZpbml0aW9uID0gZnVuY3Rpb24gZ2VuZXJhdGVGcm9tRG9jRGVmaW5pdGlvbigpIHtcbiAgY29uc3QgeyBkb2NEZWZpbml0aW9uIH0gPSB0aGlzO1xuICB0aGlzLmNsZWFyRG9jKCk7XG4gIHRoaXMuaW5pdFRPQygpO1xuICBjb25zdCBwYXJhZ3JhcGhzID0gdGhpcy50cmFuc2Zvcm1Db250ZW50VG9EcmF3YWJsZVBhcmFncmFwaHMoXG4gICAgZG9jRGVmaW5pdGlvbi5jb250ZW50XG4gICk7IC8vIEFycmF5IG9mIFBhcmFncmFwaCB3aGVyZSBhIFBhcmFnYXBoIGlzIGFuIEFycmF5IG9mIExpbmVzXG4gIGNvbnN0IHsgdG9jU2VjdGlvbnMgfSA9IHRoaXM7XG4gIE9iamVjdC5lbnRyaWVzKHRvY1NlY3Rpb25zKS5mb3JFYWNoKChbdG9jSWQsIHRvY1NlY3Rpb25dKSA9PiB7XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMudHJhbnNmb3JtVE9DVG9Db250ZW50KHRvY1NlY3Rpb24pO1xuICAgIGNvbnN0IHRvY1BhcmFncmFwaHMgPSB0aGlzLnRyYW5zZm9ybUNvbnRlbnRUb0RyYXdhYmxlUGFyYWdyYXBocyhjb250ZW50LCAxKTsgLy8gdHJhbnNmb3JtIHRvIGRyYXdhYmxlIHBhcmFncmFwaCB3aXRoIG1heCAxIGxpbmUgcGVyIHBhcmFncmFwaFxuXG4gICAgLy8gTWVyZ2UgdG9jUGFyYWdyYXBocyBpbnRvIHRoZSBjdXJyZW50IHBhcmFncmFwaHNcbiAgICBwYXJhZ3JhcGhzLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5pc1RvYyAmJiBwLmlkID09PSB0b2NJZCkge1xuICAgICAgICBwLmxpbmVzID0gdG9jUGFyYWdyYXBocy5tYXAocCA9PiBwLmxpbmVzKS5mbGF0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuZHJhd1BhcmFncmFwaHModGhpcy51cGRhdGVUT0NMaW5rcyhwYXJhZ3JhcGhzKSk7XG4gIHRoaXMucmVuZGVyU3RhbXBUb1BhZ2VzKCk7XG59O1xuXG5Kc1BERk1ha2UucHJvdG90eXBlLnJlbmRlclN0YW1wVG9QYWdlcyA9IGZ1bmN0aW9uIHJlbmRlclN0YW1wVG9QYWdlcygpIHtcbiAgY29uc3QgeyBkb2NEZWZpbml0aW9uLCBkb2MsIHRvY1NlY3Rpb25zLCBwYWdlV2lkdGgsIHBhZ2VIZWlnaHQgfSA9IHRoaXM7XG4gIGxldCB7IHJlbmRlclN0YW1wLCByZW5kZXJGb290ZXIgfSA9IGRvY0RlZmluaXRpb247XG4gIGlmIChyZW5kZXJGb290ZXIpIHtcbiAgICBjb25zb2xlLndhcm4oJ0RlcHJpY2F0ZWQgdXNhZ2UgcmVuZGVyRm9vdGVyLCB1c2UgcmVuZGVyU3RhbXAgaW5zdGVhZCcpO1xuICAgIHJlbmRlclN0YW1wID0gcmVuZGVyRm9vdGVyO1xuICB9XG4gIGlmIChyZW5kZXJTdGFtcCkge1xuICAgIGxldCBjdXJyZW50UGFnZU51bWJlciA9IDE7XG4gICAgd2hpbGUgKGN1cnJlbnRQYWdlTnVtYmVyIDw9IHRoaXMuc2l6ZSgpKSB7XG4gICAgICBkb2Muc2V0UGFnZShjdXJyZW50UGFnZU51bWJlcik7XG4gICAgICByZW5kZXJTdGFtcChcbiAgICAgICAgZG9jLFxuICAgICAgICBjdXJyZW50UGFnZU51bWJlcixcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBwYWdlV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBwYWdlSGVpZ2h0XG4gICAgICAgIH0sXG4gICAgICAgIHRvY1NlY3Rpb25zXG4gICAgICApO1xuICAgICAgY3VycmVudFBhZ2VOdW1iZXIgKz0gMTtcbiAgICB9XG4gIH1cbn07XG5cbkpzUERGTWFrZS5wcm90b3R5cGUuZG93bmxvYWQgPSBmdW5jdGlvbiBkb3dubG9hZCgpIHtcbiAgdGhpcy5kb2Muc2F2ZSh0aGlzLnRpdGxlKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRKc1BERkFQSShjYikge1xuICBjYihKc1BERi5BUEkpO1xufVxuIiwiZXhwb3J0IGNvbnN0IERFRkFVTFRfRk9OVF9TSVpFID0gMTg7XG5leHBvcnQgY29uc3QgREVGQVVMVF9MSU5FX0hFSUdIVCA9IDE7XG5leHBvcnQgY29uc3QgREVGQVVMVF9BTElHTiA9ICdsZWZ0JztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZPTlRfTkFNRSA9ICdoZWx2ZXRpY2EnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfRk9OVF9TVFlMRSA9ICdub3JtYWwnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVYVF9DT0xPUiA9ICdibGFjayc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgREVGQVVMVF9GT05UX1NJWkUsXG4gIERFRkFVTFRfTElORV9IRUlHSFQsXG4gIERFRkFVTFRfQUxJR04sXG4gIERFRkFVTFRfRk9OVF9OQU1FLFxuICBERUZBVUxUX0ZPTlRfU1RZTEUsXG4gIERFRkFVTFRfVEVYVF9DT0xPUlxufTtcbiIsImV4cG9ydCBjb25zdCBtYXhCeSA9IChcbiAgYXJyYXkgPSBbXSxcbiAgZ2V0VmFsdWUgPSBvYmogPT4gb2JqLFxuICBtYXhGdW5jID0gTWF0aC5tYXhcbikgPT4ge1xuICBpZiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShcbiAgICAgIChwcmV2LCBjdXJyZW50KSA9PiBtYXhGdW5jKGdldFZhbHVlKHByZXYpLCBnZXRWYWx1ZShjdXJyZW50KSksXG4gICAgICBhcnJheVswXVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cblN0cmluZy5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zcGxpdCgnJylcbiAgICAucmV2ZXJzZSgpXG4gICAgLmpvaW4oJycpO1xufTtcblxuY29uc3QgRVBTID0gMWUtNTtcblxuY29uc3QgbGVzc1RoYW5PckVxdWFsID0gKGEsIGIpID0+IHtcbiAgcmV0dXJuIGEgPCBiIHx8IE1hdGguYWJzKGEgLSBiKSA8IEVQUztcbn07XG5cbmNvbnN0IHJlbW92ZUNoYXJhY3RlcnNUb0ZpdFdpZHRoID0gKFxuICB0ZXh0LFxuICB3aWR0aCxcbiAgbnVtT2ZEb3RzLFxuICBnZXRUZXh0V2lkdGgsXG4gIHNlcGVyYXRvciA9ICcgJ1xuKSA9PiB7XG4gIGNvbnN0IHBhZGRpbmdUZXh0ID0gQXJyYXkobnVtT2ZEb3RzKVxuICAgIC5maWxsKCcuJylcbiAgICAuam9pbignJylcbiAgICAuY29uY2F0KHNlcGVyYXRvcik7XG4gIGNvbnN0IHRvdGFsV2lkdGggPSB3aWR0aCAtIGdldFRleHRXaWR0aChwYWRkaW5nVGV4dCk7XG4gIGxldCBuVGV4dCA9ICcnO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChcbiAgICBpIDwgdGV4dC5sZW5ndGggJiZcbiAgICBsZXNzVGhhbk9yRXF1YWwoXG4gICAgICBnZXRUZXh0V2lkdGgoblRleHQuY29uY2F0KHRleHRbaV0sIHBhZGRpbmdUZXh0KSksXG4gICAgICB0b3RhbFdpZHRoXG4gICAgKVxuICApIHtcbiAgICBuVGV4dCA9IG5UZXh0LmNvbmNhdCh0ZXh0W2ldKTtcbiAgICBpICs9IDE7XG4gIH1cbiAgblRleHQgPSBuVGV4dC5jb25jYXQocGFkZGluZ1RleHQpO1xuICByZXR1cm4gblRleHQ7XG59O1xuXG5jb25zdCBhZGREb3RzVG9GaXRXaWR0aCA9ICh0ZXh0LCB3aWR0aCwgZ2V0VGV4dFdpZHRoLCBzZXBlcmF0b3IgPSAnICAnKSA9PiB7XG4gIGxldCBuVGV4dCA9IHRleHQ7XG4gIHdoaWxlIChsZXNzVGhhbk9yRXF1YWwoZ2V0VGV4dFdpZHRoKG5UZXh0LmNvbmNhdCgnLicsIHNlcGVyYXRvcikpLCB3aWR0aCkpIHtcbiAgICBuVGV4dCA9IG5UZXh0LmNvbmNhdCgnLicpO1xuICB9XG4gIHJldHVybiBuVGV4dC5jb25jYXQoc2VwZXJhdG9yKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyAyIGxpbmVzIGNvbm5uZWN0ZWQgd2l0aCBkb3RzLCB0aGUgZmlyc3QgbGluZSBpcyB0aGUgbGluayBhbmQgdGhlIHNlY29uZCBpcyB0aGUgcGFnZSBudW1iZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaW5lIHRoZSBsaW5lIHRvIGFkZCBkb3RzIHRvXG4gKiBAcGFyYW0ge051bWJlcn0gbWluRG90cyBtaW5pbXVtIG51bWJlciBvZiBkb3RzIGJldHdlZW4gdGhlIHR3byB0ZXh0c1xuICogQHBhcmFtIHtTdHJpbmd9IHNlcGVyYXRvciB0ZXh0IHRvIHNlcHJhdGUgYmV0d2VlbiB0aGUgdHdvIHRleHRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXRUZXh0V2lkdGggYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHdpZHRoIG9mIGEgZ2l2ZW4gdGV4dCBpbiBwaXhlbHNcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbm5lY3RXaXRoRG90c1RvRml0TGluZSA9IChsaW5lLCBnZXRUZXh0V2lkdGgpID0+IHtcbiAgY29uc3QgbWluUmlnaHRUZXh0ID0gQXJyYXkoOSlcbiAgICAuZmlsbCgnLicpXG4gICAgLmpvaW4oJycpXG4gICAgLmNvbmNhdChsaW5lLmxpbmtQYWdlKTtcbiAgY29uc3QgcmlnaHRUZXh0V2lkdGggPSBnZXRUZXh0V2lkdGgobWluUmlnaHRUZXh0KTtcbiAgY29uc3QgbGVmdFRleHRXaWR0aCA9IGdldFRleHRXaWR0aChsaW5lLnRleHQpO1xuICBsZXQgbGVmdFRleHQgPSBsaW5lLnRleHQ7XG4gIGxldCByaWdodFRleHQgPSBtaW5SaWdodFRleHQ7XG4gIGlmIChsaW5lLmxpbmVXaWR0aCAtIGxlZnRUZXh0V2lkdGggPCByaWdodFRleHRXaWR0aCkge1xuICAgIC8vIHRoaXMgbWVhbnMgd2UgbmVlZCB0byByZW1vdmUgc29tZSBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpbmUgdGV4dCB0byBtYWtlIHNwYWNlIGZvciB0aGUgZG90cyBhbmQgdGhlIHBhZ2VOdW1iZXJcbiAgICBsZWZ0VGV4dCA9IHJlbW92ZUNoYXJhY3RlcnNUb0ZpdFdpZHRoKFxuICAgICAgbGluZS50ZXh0LFxuICAgICAgbGluZS5saW5lV2lkdGggLSByaWdodFRleHRXaWR0aCxcbiAgICAgIDIsXG4gICAgICBnZXRUZXh0V2lkdGhcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJpZ2h0VGV4dCA9IGFkZERvdHNUb0ZpdFdpZHRoKFxuICAgICAgbWluUmlnaHRUZXh0LnJldmVyc2UoKSxcbiAgICAgIGxpbmUubGluZVdpZHRoIC0gbGVmdFRleHRXaWR0aCxcbiAgICAgIGdldFRleHRXaWR0aFxuICAgICkucmV2ZXJzZSgpO1xuICB9XG4gIHJldHVybiBbXG4gICAgeyAuLi5saW5lLCB0ZXh0OiBsZWZ0VGV4dCB9LFxuICAgIHtcbiAgICAgIC4uLmxpbmUsXG4gICAgICB0ZXh0OiByaWdodFRleHQsXG4gICAgICB4T2Zmc2V0OiBsaW5lLnhPZmZzZXQgKyBsaW5lLmxpbmVXaWR0aCAtIGdldFRleHRXaWR0aChyaWdodFRleHQpXG4gICAgfVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBtYXhCeVxufTtcbiIsImltcG9ydCB7IEpzUERGTWFrZSB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgY29ubmVjdFdpdGhEb3RzVG9GaXRMaW5lIH0gZnJvbSAnLi91dGlscyc7XG5cbkpzUERGTWFrZS5wcm90b3R5cGUuaW5pdFRPQyA9IGZ1bmN0aW9uIGluaXRUT0MoKSB7XG4gIHRoaXMudG9jU2VjdGlvbnMgPSB7fTtcbiAgdGhpcy5kb2NEZWZpbml0aW9uLmNvbnRlbnRcbiAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS50b2MpXG4gICAgLmZvckVhY2goKHsgdG9jIH0pID0+IHtcbiAgICAgIGlmICh0aGlzLnRvY1NlY3Rpb25zW3RvYy5pZF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBEdXBsaWNhdGUgdGFibGUgb2YgY29udGVudHMgaWQgJyR7XG4gICAgICAgICAgICB0b2MuaWRcbiAgICAgICAgICB9JywgcGxlYXNlIG1ha2Ugc3VyZSBhbGwgdGFibGUgb2YgY29udGVudHMgaGF2ZSBhIHVuaXEgaWRgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdG9jKTsgLy8gZGVlcCBjbG9uZSB0b2NcbiAgICAgIGRlbGV0ZSBvcHRpb25zLmlkO1xuICAgICAgdGhpcy50b2NTZWN0aW9uc1t0b2MuaWRdID0ge1xuICAgICAgICBpdGVtczogW10sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgfSk7XG59O1xuXG5Kc1BERk1ha2UucHJvdG90eXBlLnRyYW5zZm9ybVRPQ1RvQ29udGVudCA9IGZ1bmN0aW9uIHRyYW5zZm9ybVRPQ1RvQ29udGVudChcbiAgc2VjdGlvblxuKSB7XG4gIGNvbnN0IHsgb3B0aW9ucywgaXRlbXMgfSA9IHNlY3Rpb247XG4gIGNvbnN0IGNvbnRlbnQgPSBbb3B0aW9ucy50aXRsZV07XG4gIGl0ZW1zLmZvckVhY2goKHsgdGl0bGUsIHBhcmFncmFwaEluZGV4IH0pID0+IHtcbiAgICBjb25zdCB0b2NJdGVtID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHsgdGV4dDogdGl0bGUsIGlzTGluazogdHJ1ZSwgbGlua1BhcmFncmFwaEluZGV4OiBwYXJhZ3JhcGhJbmRleCB9LFxuICAgICAgb3B0aW9ucy5pdGVtT3B0aW9uc1xuICAgICk7XG4gICAgY29udGVudC5wdXNoKHRvY0l0ZW0pO1xuICB9KTtcbiAgcmV0dXJuIGNvbnRlbnQ7XG59O1xuXG5Kc1BERk1ha2UucHJvdG90eXBlLnVwZGF0ZVRPQ0xpbmtzID0gZnVuY3Rpb24gdXBkYXRlVE9DTGlua3MocGFyYWdyYXBocykge1xuICBsZXQgdG9jUGFyYWdyYXBoc1NpemUgPSAwO1xuICBsZXQgbGFzdFBhZ2UgPSAwO1xuXG4gIC8vIExvb3Agb24gYWxsIHBhcmFncmFwaHNcbiAgcGFyYWdyYXBocy5mb3JFYWNoKHAgPT4ge1xuICAgIGxldCBwYXJhZ3JhcGhTaXplID0gMDtcbiAgICBpZiAocC5pc1RvYykge1xuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgcGFyYWdyYXBoIGlzIGEgdGFibGUgb2YgY29udGVudHMgdXBkYXRlIGl0J3MgcGFnZSBudW1iZXIgdG8gYmUgYWZ0ZXIgbGFzdCBwYWdlXG4gICAgICBwLmxpbmVzLmZvckVhY2goKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIHBhcmFncmFwaFNpemUgPSBsaW5lLnBhZ2VOdW1iZXI7XG4gICAgICAgIGxpbmUucGFnZU51bWJlciArPSBsYXN0UGFnZTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgLy8gYXNzaWduIHRoZSBwYWdlIG51bWJlciBvZiB0aGUgdG9jIHNlY3Rpb24gdG8gaXQncyBmaXJzdCBsaW5lIHBhZ2UgbnVtYmVyXG4gICAgICAgICAgdGhpcy50b2NTZWN0aW9uc1twLmlkXS5wYWdlTnVtYmVyID0gbGluZS5wYWdlTnVtYmVyO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEluY3JlYXNlIHRoZSBzaXplIG9mIHRoZSB0YWJsZSBvZiBjb250ZW50cyBwYXJhZ3JhcGggYnkgdGhpcyB0b2Mgc2l6ZVxuICAgICAgdG9jUGFyYWdyYXBoc1NpemUgKz0gcGFyYWdyYXBoU2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBhIG5vcm1hbCBwYXJhZ3JhcGggdGhlbiBpbmNyZWFzZSBpdCdzIHBhZ2UgbnVtYmVyIHdpdGggdGhlIHRvY1BhcmFncmFwaFNpemUgdG8gc2hpZnQgaXQgZG93blxuICAgICAgcC5saW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICBsaW5lLnBhZ2VOdW1iZXIgKz0gdG9jUGFyYWdyYXBoc1NpemU7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgbGFzdCBwYWdlXG4gICAgICAgIGxhc3RQYWdlID0gbGluZS5wYWdlTnVtYmVyO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBMaW5rIGFsbCBsaW5rZWQgbGluZXMgdG8gdGhlIGNvcnJlY3QgcGFyYWdyYXBoJ3MgZmlyc3QgbGluZVxuICBwYXJhZ3JhcGhzLmZvckVhY2gocCA9PiB7XG4gICAgcC5saW5lcyA9IHAubGluZXMucmVkdWNlKChuTGluZXMsIGxpbmUpID0+IHtcbiAgICAgIGlmIChsaW5lLmxpbmtQYXJhZ3JhcGhJbmRleCA+PSAwKSB7XG4gICAgICAgIC8vIDIgbGluZXMgY29ubm5lY3RlZCB3aXRoIGRvdHMgdGhlIGZpcnN0IGxpbmUgaXMgdGhlIGxpbmssIHRoZSBzZWNvbmQgaXMgdGhlIHBhZ2UgbnVtYmVyXG4gICAgICAgIGNvbnN0IGRvdENvbm5lY3RMaW5lcyA9IGNvbm5lY3RXaXRoRG90c1RvRml0TGluZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICAuLi5saW5lLFxuICAgICAgICAgICAgbGlua1BhZ2U6IHBhcmFncmFwaHNbbGluZS5saW5rUGFyYWdyYXBoSW5kZXhdLmxpbmVzWzBdLnBhZ2VOdW1iZXJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRleHQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jXG4gICAgICAgICAgICAgIC5zZXRGb250KGxpbmUuZm9udE5hbWUsIGxpbmUuZm9udFN0eWxlKVxuICAgICAgICAgICAgICAuc2V0Rm9udFNpemUobGluZS5mb250U2l6ZSlcbiAgICAgICAgICAgICAgLmdldFRleHRXaWR0aCh0ZXh0KTtcbiAgICAgICAgICB9IC8vIHNlbmQgdGhlIGdldCB0ZXh0IHdpZHRoIGZ1bmN0aW9uIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBsaW5lJ3MgZm9udCBzcGVjc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbkxpbmVzLmNvbmNhdChkb3RDb25uZWN0TGluZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5MaW5lcy5jb25jYXQobGluZSk7XG4gICAgfSwgW10pO1xuICB9KTtcblxuICByZXR1cm4gcGFyYWdyYXBocztcbn07XG4iXSwibmFtZXMiOlsiSnNQREZNYWtlIiwidGl0bGUiLCJkb2NEZWZpbml0aW9uIiwib3B0aW9ucyIsImpzUGRmT3B0aW9ucyIsIkRFRkFVTFRfTElORV9IRUlHSFQiLCJkb2MiLCJKc1BERiIsInNldFByb3BlcnRpZXMiLCJwYWdlV2lkdGgiLCJ0aGlzIiwiaW50ZXJuYWwiLCJwYWdlU2l6ZSIsImdldFdpZHRoIiwicGFnZUhlaWdodCIsImdldEhlaWdodCIsInBhZ2VNYXJnaW5MZWZ0IiwicGFnZU1hcmdpblJpZ2h0IiwicGFnZU1hcmdpblRvcCIsInBhZ2VNYXJnaW5Cb3R0b20iLCJtYXhMaW5lV2lkdGgiLCJ0b2NTZWN0aW9ucyIsImdlbmVyYXRlRnJvbURvY0RlZmluaXRpb24iLCJleHRlbmRKc1BERkFQSSIsImNiIiwiQVBJIiwiREVGQVVMVF9GT05UX1NJWkUiLCJERUZBVUxUX0FMSUdOIiwiREVGQVVMVF9GT05UX05BTUUiLCJERUZBVUxUX0ZPTlRfU1RZTEUiLCJERUZBVUxUX1RFWFRfQ09MT1IiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJyZXZlcnNlIiwic3BsaXQiLCJqb2luIiwiRVBTIiwibGVzc1RoYW5PckVxdWFsIiwiYSIsImIiLCJNYXRoIiwiYWJzIiwicmVtb3ZlQ2hhcmFjdGVyc1RvRml0V2lkdGgiLCJ0ZXh0Iiwid2lkdGgiLCJudW1PZkRvdHMiLCJnZXRUZXh0V2lkdGgiLCJzZXBlcmF0b3IiLCJwYWRkaW5nVGV4dCIsIkFycmF5IiwiZmlsbCIsImNvbmNhdCIsInRvdGFsV2lkdGgiLCJuVGV4dCIsImkiLCJsZW5ndGgiLCJhZGREb3RzVG9GaXRXaWR0aCIsImNvbm5lY3RXaXRoRG90c1RvRml0TGluZSIsImxpbmUiLCJtaW5SaWdodFRleHQiLCJsaW5rUGFnZSIsInJpZ2h0VGV4dFdpZHRoIiwibGVmdFRleHRXaWR0aCIsImxlZnRUZXh0IiwicmlnaHRUZXh0IiwibGluZVdpZHRoIiwieE9mZnNldCIsImluaXRUT0MiLCJjb250ZW50IiwiZmlsdGVyIiwiaXRlbSIsInRvYyIsImZvckVhY2giLCJfdGhpcyIsImlkIiwiRXJyb3IiLCJPYmplY3QiLCJhc3NpZ24iLCJ0cmFuc2Zvcm1UT0NUb0NvbnRlbnQiLCJzZWN0aW9uIiwiaXRlbXMiLCJwYXJhZ3JhcGhJbmRleCIsInRvY0l0ZW0iLCJpc0xpbmsiLCJsaW5rUGFyYWdyYXBoSW5kZXgiLCJpdGVtT3B0aW9ucyIsInB1c2giLCJ1cGRhdGVUT0NMaW5rcyIsInBhcmFncmFwaHMiLCJ0b2NQYXJhZ3JhcGhzU2l6ZSIsImxhc3RQYWdlIiwicGFyYWdyYXBoU2l6ZSIsInAiLCJpc1RvYyIsImxpbmVzIiwiaW5kZXgiLCJwYWdlTnVtYmVyIiwicmVkdWNlIiwibkxpbmVzIiwiZG90Q29ubmVjdExpbmVzIiwiX3RoaXMyIiwic2V0Rm9udCIsImZvbnROYW1lIiwiZm9udFN0eWxlIiwic2V0Rm9udFNpemUiLCJmb250U2l6ZSIsInNpemUiLCJwYWdlcyIsImFkZFBhZ2UiLCJjdXJyZW50UGFnZSIsImdldEN1cnJlbnRQYWdlTnVtYmVyIiwiaW5zZXJ0UGFnZSIsImNsZWFyRG9jIiwiZGVsZXRlUGFnZSIsInVwZGF0ZURvY0RlZmluaXRpb24iLCJnZXRDdXJyZW50UGFnZUluZm8iLCJpc0N1cnNvck91dE9mUGFnZVZlcnRpY2FsbHkiLCJ5T2Zmc2V0IiwiZHJhd1RleHRJbkxpbmUiLCJ0ZXh0Q29sb3IiLCJtYXhGb250U2l6ZSIsImxpbmtVcmwiLCJoYXNCdWxsZXQiLCJidWxsZXRTcGFjaW5nIiwiaGlnaGxpZ2h0Q29sb3IiLCJjZW50ZXIiLCJzZXREcmF3Q29sb3IiLCJzZXRGaWxsQ29sb3IiLCJyZWN0Iiwic2V0UGFnZSIsInNldFRleHRDb2xvciIsImxpbmsiLCJ0ZXh0V2l0aExpbmsiLCJtYXgiLCJjaXJjbGUiLCJkcmF3UGFyYWdyYXBocyIsImVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzIiwicmVwbGFjZSIsInJlbmRlclBhcmFncmFwaCIsInBhZ2VCcmVhayIsImFsaWduIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwidG9jSWRzIiwidG9jSXRlbVRleHQiLCJtYXhMaW5lc1BlclBhcmFncmFwaCIsIndhcm4iLCJ0b2NJZCIsInRleHRMaW5lcyIsInNwbGl0VGV4dFRvU2l6ZSIsInNwbGljZSIsInRyYW5zZm9ybUNvbnRlbnRUb0RyYXdhYmxlUGFyYWdyYXBocyIsIm1hcCIsInBhcmFtcyIsIl90aGlzMyIsIm5leHRYT2Zmc2V0IiwibmV4dFlPZmZzZXQiLCJuZXh0UGFnZSIsImVudHJpZXMiLCJ0b2NTZWN0aW9uIiwiX3RoaXM0IiwidG9jUGFyYWdyYXBocyIsImZsYXQiLCJyZW5kZXJTdGFtcFRvUGFnZXMiLCJyZW5kZXJTdGFtcCIsInJlbmRlckZvb3RlciIsImN1cnJlbnRQYWdlTnVtYmVyIiwiZG93bmxvYWQiLCJzYXZlIl0sIm1hcHBpbmdzIjoiaUdBV08sUUFBU0EsV0FBVUMsRUFBT0MsTUFBZUMsa0VBQ3pDRCxjQUFnQkEsS0FDZkUsZ0JBQ1MsU0FDUCxZQUNFLDRCQUVJQywwQkFFVEYsb0JBQWVBLFFBQ2ZHLElBQU0sR0FBSUMsT0FBTUgsR0FBY0ksOEJBRzlCUCxNQUFRQSxPQUNSUSxVQUFZQyxLQUFLSixJQUFJSyxTQUFTQyxTQUFTQyxnQkFDdkNDLFdBQWFKLEtBQUtKLElBQUlLLFNBQVNDLFNBQVNHLGlCQUN4Q0MsZUFBaUJiLEVBQVFhLGdCQUFrQixPQUMzQ0MsZ0JBQWtCZCxFQUFRYyxpQkFBbUIsT0FDN0NDLGNBQWdCZixFQUFRZSxlQUFpQixPQUN6Q0MsaUJBQW1CaEIsRUFBUWdCLGtCQUFvQixPQUMvQ0MsYUFDSFYsS0FBS0QsVUFBWUMsS0FBS00sZUFBaUJOLEtBQUtPLHFCQUN6Q0ksb0JBQ0FDLDRCQXdZUCxRQUFnQkMsZ0JBQWVDLEtBQzFCakIsTUFBTWtCLHdHQzNhRUMsa0JBQW9CLEdBQ3BCckIsb0JBQXNCLEVBQ3RCc0IsY0FBZ0IsT0FDaEJDLGtCQUFvQixZQUNwQkMsbUJBQXFCLFNBQ3JCQyxtQkFBcUIsb21CQ1NsQ0MsUUFBT0MsVUFBVUMsUUFBVSxpQkFDbEJ2QixNQUFLd0IsTUFBTSxJQUNmRCxVQUNBRSxLQUFLLElBR1YsSUFBTUMsS0FBTSxLQUVOQyxnQkFBa0IsU0FBQ0MsRUFBR0MsU0FDbkJELEdBQUlDLEdBQUtDLEtBQUtDLElBQUlI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
