var JsPDFMake = (function (JsPDF) {
'use strict';

JsPDF = 'default' in JsPDF ? JsPDF['default'] : JsPDF;

var DEFAULT_FONT_SIZE = 18;
var DEFAULT_LINE_HEIGHT = 1;
var DEFAULT_ALIGN = 'left';
var DEFAULT_FONT_NAME = 'helvetica';
var DEFAULT_FONT_STYLE = 'normal';
var DEFAULT_TEXT_COLOR = 'black';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function JsPDFMake(title, docDefinition) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  this.docDefinition = docDefinition;
  this.options = {
    orientation: 'p',
    unit: 'pt',
    format: 'a4',
    hotfixes: [], // an array of hotfix strings to enable
    lineHeight: DEFAULT_LINE_HEIGHT
  };
  this.doc = new JsPDF(this.options).setProperties({ title: title });
  this.pageWidth = this.doc.internal.pageSize.getWidth();
  this.pageHeight = this.doc.internal.pageSize.getHeight();
  this.pageXMargin = options.pageXMargin || 0;
  this.pageYMargin = options.pageYMargin || 0;
  this.maxLineWidth = this.pageWidth - this.pageXMargin * 2;
  this.generateFromDocDefinition();
}

JsPDFMake.prototype.clearDoc = function clearDoc() {
  var doc = this.doc;

  while (doc.internal.pages.length > 1) {
    doc.deletePage(1);
  }
  doc.addPage();
};

JsPDFMake.prototype.updateDocDefinition = function updateDocDefinition(docDefinition) {
  this.docDefinition = docDefinition;
  this.generateFromDocDefinition();
};

JsPDFMake.prototype.isCursorOutOfPageVertically = function isCursorOutOfPageVertically(yOffset) {
  return yOffset > this.pageHeight - this.pageYMargin;
};

/**
 * @param {String} text The text to be inlined
 * @param {Number} xOffset The x offset for the new text
 * @param {Number} yOffset The y offset for the new text
 * @param {Number} fontSize The font size for the new text
 * @param {Number} maxFontSize The maximum font size in this line.
 * @param {String} align Either 'left', 'right' or 'center', default is 'left'
 */
JsPDFMake.prototype.drawTextInLine = function drawTextInLine(text) {
  var xOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var yOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var fontSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_FONT_SIZE;
  var maxFontSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var doc = this.doc;

  var center = fontSize / 2.0 + fontSize / 4.0; // The renderer starts drawing text at the center
  doc.setFontSize(fontSize).text(xOffset, center + Math.max(fontSize, maxFontSize) - fontSize + yOffset, text);
  return {
    nextXOffset: xOffset + doc.getTextWidth(text + ' '),
    nextYOffset: yOffset + Math.max(fontSize, maxFontSize)
  };
};

JsPDFMake.prototype.generateFromDocDefinition = function generateFromDocDefinition() {
  var _this = this;

  var doc = this.doc,
      docDefinition = this.docDefinition,
      pageXMargin = this.pageXMargin,
      pageYMargin = this.pageYMargin,
      maxLineWidth = this.maxLineWidth,
      pageWidth = this.pageWidth;

  this.clearDoc();
  var yOffset = pageYMargin;
  var xOffset = void 0;
  docDefinition.content.forEach(function (_ref) {
    var text = _ref.text,
        _ref$fontSize = _ref.fontSize,
        fontSize = _ref$fontSize === undefined ? DEFAULT_FONT_SIZE : _ref$fontSize,
        _ref$fontName = _ref.fontName,
        fontName = _ref$fontName === undefined ? DEFAULT_FONT_NAME : _ref$fontName,
        _ref$fontStyle = _ref.fontStyle,
        fontStyle = _ref$fontStyle === undefined ? DEFAULT_FONT_STYLE : _ref$fontStyle,
        _ref$textColor = _ref.textColor,
        textColor = _ref$textColor === undefined ? DEFAULT_TEXT_COLOR : _ref$textColor,
        _ref$marginTop = _ref.marginTop,
        marginTop = _ref$marginTop === undefined ? 0 : _ref$marginTop,
        _ref$marginRight = _ref.marginRight,
        marginRight = _ref$marginRight === undefined ? 0 : _ref$marginRight,
        _ref$marginBottom = _ref.marginBottom,
        marginBottom = _ref$marginBottom === undefined ? 0 : _ref$marginBottom,
        _ref$marginLeft = _ref.marginLeft,
        marginLeft = _ref$marginLeft === undefined ? 0 : _ref$marginLeft,
        _ref$align = _ref.align,
        align = _ref$align === undefined ? DEFAULT_ALIGN : _ref$align,
        _ref$pageBreak = _ref.pageBreak,
        pageBreak = _ref$pageBreak === undefined ? 'none' : _ref$pageBreak;

    if ((typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object') {
      // TODO: HANDLE INLINE TEXT OBJECTS
      // console.warn('Objects are not yet supported as text, this section will not be rendered');
      return;
    }

    // splitTextToSize takes your string and turns it in to an array of strings,
    // each of which can be displayed within the specified maxLineWidth.
    var textLines = doc.setFontSize(fontSize).setFont(fontName, fontStyle).setTextColor(textColor).splitTextToSize(text, maxLineWidth - marginLeft - marginRight);

    if (pageBreak === 'before') {
      yOffset = pageYMargin;
      doc.addPage();
    }

    yOffset += marginTop;

    // doc.text can now add those lines easily; otherwise, it would have run text off the screen!
    textLines.forEach(function (line) {
      if (_this.isCursorOutOfPageVertically(yOffset + fontSize)) {
        // if next line can't be written reset offset and add a new page
        yOffset = pageYMargin;
        doc.addPage();
      }
      xOffset = pageXMargin + marginLeft;
      if (align === 'center') {
        xOffset = pageWidth / 2.0 - doc.getTextWidth(line) / 2.0 + marginLeft - marginRight;
      } else if (align === 'right') {
        xOffset = pageWidth - doc.getTextWidth(line) - pageXMargin - marginRight;
      }

      var _drawTextInLine = _this.drawTextInLine(line, xOffset, yOffset, fontSize, 0),
          nextYOffset = _drawTextInLine.nextYOffset;

      yOffset = nextYOffset;
    });

    yOffset += marginBottom;

    if (pageBreak === 'after') {
      yOffset = pageYMargin;
      doc.addPage();
    }
  });
};

JsPDFMake.prototype.download = function download() {
  this.doc.save();
};

return JsPDFMake;

}(jsPDF));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
